// 1. Configuration
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 2. Enums
// Note: All enums previously used by the Profile model have been removed.
enum UserRole {
  CLIENT
  CONTRACTOR
  ADMIN
}

// 3. Models

model User {
  id                  String   @id @default(uuid())
  email               String   @unique
  password            String?
  firstName           String
  lastName            String
  phoneNumber         String?  @unique
  role                UserRole @default(CLIENT)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  stripeCustomerId    String?
  isActive            Boolean  @default(true)
  isFrozen            Boolean  @default(false)
  googleId            String?
  emailVerified       Boolean  @default(false)
  verificationToken   String?

  // Relationships
  profile         Profile?
  meetings        Meeting[]
  refreshTokens   RefreshToken[]
  hiredContracts  ClientContractor[] @relation("clientHires")
  contractsAsHired ClientContractor[] @relation("contractorHires")
  likedContractors LikedContractor[]  @relation("ClientLikes")
  likedByClients  LikedContractor[]  @relation("ContractorLikedBy")

  @@index([googleId])
}

model Profile {
  id                         String    @id @default(uuid())
  userId                     String    @unique
  user                       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  isVerified                 Boolean  @default(false)  


  // --- MODIFIED FIELDS ---
  roleType                   String[]
  verticalSpecialization     String[]
  rateRange                  String?
  englishProficiency         String?  
  availability               String?

  otherRoleType              String?
  otherVertical              String?
  yearsExperience            Int?
  skills                     String[]
  remoteTools                String[]
  spokenLanguages            String[]
  otherLanguage              String?
  customRate                 Float?
  resumeUrl                  String?
  profilePhotoUrl            String?
  internetSpeedScreenshotUrl String?
  timezone                   String?
  country                    String?
  otherCountry               String?
  videoIntroductionUrl       String?
  portfolioUrl               String?

  // Compliance fields...
  hipaaCertified             Boolean  @default(false)
  professionalCertValid      Boolean  @default(false)
  signedNda                  Boolean  @default(false)
  backgroundCheck            Boolean  @default(false)
  criminalRecordCheck        Boolean  @default(false)
  gdprTraining               Boolean  @default(false)
  pciCompliance              Boolean  @default(false)
  socialMediaScreening       Boolean  @default(false)
  usInsuranceCompliance      Boolean  @default(false)
  canadaInsuranceCompliance  Boolean  @default(false)
  willingToSignNda           Boolean  @default(false)
  willingBackgroundCheck     Boolean  @default(false)
  willingReferenceCheck      Boolean  @default(false)
  privacyPolicyConsent       Boolean  @default(false)
  creditCheck                Boolean  @default(false)
  vulnerableSectorCheck      Boolean  @default(false)
  contactConsent             Boolean  @default(false)
  emailConsent               Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model ClientContractor {
  id              String    @id @default(uuid())
  clientId        String
  contractorId    String
  hiredAt         DateTime  @default(now())
  active          Boolean   @default(true)
  endedAt         DateTime?
  paymentIntentId String?
  paymentAmount   Float?
  paymentStatus   String?   @default("pending")

  // Relationships
  client     User      @relation(name: "clientHires", fields: [clientId], references: [id], onDelete: Cascade)
  contractor User      @relation(name: "contractorHires", fields: [contractorId], references: [id], onDelete: Cascade)
  meetings   Meeting[]

  @@unique([clientId, contractorId])
  @@index([contractorId])
  @@index([clientId])
}

model LikedContractor {
  id           String   @id @default(uuid())
  clientId     String
  contractorId String
  createdAt    DateTime @default(now())

  // Relationships
  client     User @relation("ClientLikes", fields: [clientId], references: [id], onDelete: Cascade)
  contractor User @relation("ContractorLikedBy", fields: [contractorId], references: [id], onDelete: Cascade)

  @@unique([clientId, contractorId])
  @@index([clientId])
}

model Meeting {
  id                 String   @id @default(uuid())
  clientContractorId String
  clientContractor   ClientContractor @relation(fields: [clientContractorId], references: [id], onDelete: Cascade)
  title              String
  description        String?
  startTime          DateTime
  endTime            DateTime
  meetingUrl         String
  calendlyEventId    String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  attendees          User[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
